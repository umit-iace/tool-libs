#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Template Project documentation build configuration file, created by
# sphinx-quickstart on Wed Jun 20 10:37:34 2018.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
import os
import subprocess
import sys

cwd = os.getcwd()
project_root = os.path.dirname(cwd)
sys.path.insert(0, project_root)

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
needs_sphinx = '1.3'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = ['sphinx.ext.autodoc',
              'sphinx.ext.todo',
              'sphinx.ext.coverage',
              'sphinx.ext.viewcode',
              'sphinx.ext.autosummary',
              # 'sphinx.ext.autosectionlabel',
              'sphinx.ext.graphviz',
              'sphinxcontrib.tikz',
              'sphinx.ext.imgmath',
              'sphinx.ext.napoleon',
              'breathe',
              ]

# Define how math should be rendered
imgmath_image_format = 'svg'

# Enable apidoc
# extensions.append('sphinxcontrib.apidoc')
# apidoc_module_dir = '..'
# apidoc_output_dir = 'python-autodoc'
# apidoc_excluded_paths = []
# apidoc_separate_modules = True

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
source_suffix = '.rst'
exclude_patterns = ['**/*.inc.rst']
# The master toctree document.
master_doc = 'index'

# General information about the project.
project = 'tool-libs'
copyright = '2020 IACE'
author = 'IACE'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
import time

# The short X.Y version.
version = 'latest'
# The full version, including alpha/beta/rc tags.
release = time.asctime()

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = 'de'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
# exclude_patterns = ["matproject-autodoc"]

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True
todo_link_only = True

# -- Options to translate jupyter notebooks to rst --------------------
nbs_projects = {
}

if not os.path.exists('nbs'):
    os.makedirs('nbs')

for key, value in nbs_projects.items():
    subprocess.run(['jupyter-nbconvert', '--execute', value, '--to', 'rst', '--output-dir', 'nbs'])

if sys.platform == 'win32':
    for file in os.listdir("nbs"):
        if file.endswith(".rst"):
            filePath = os.path.join("nbs", file)
            with open(filePath) as f:
                s = f.read()
            with open(filePath, 'w') as f:
                s = re.sub('%5C', '/', s)
                f.write(s)

# -- Options to translate tikz pictures to png ------------------------
tikz_proc_suite = 'ImageMagick'
tikz_latex_preamble = '''\usepackage{bm}
\usepackage{ifthen}'''
tikz_tikzlibraries = 'plotmarks,math,positioning,shapes,arrows,backgrounds,circuits.logic.IEC,circuits.ee.IEC,decorations.pathmorphing,patterns,shapes.geometric,calc,fit,spy,matrix,decorations.pathreplacing,decorations.markings'

# -- Options for Breathe ----------------------------------------------
doc_projects = {
    "Utils": [""],
    "STM": [""],
    "Sensors": [""],
}

code_dir = "../"

breathe_projects = {}
breathe_projects_source = {}

for key, value in doc_projects.items():
    breathe_projects.update({key: "_build/breathe/doxygen/" + key + "/xml"})
    breathe_projects_source.update({key: (code_dir + key.lower(), value)})

breathe_default_members = ('members', 'undoc-members')
breathe_show_define_initializer = True
breathe_implementation_filename_extensions = ['.cpp']
breathe_doxygen_config_options = {
    'ALIASES': '"rst=\\verbatim embed:rst:leading-asterisk"',
    'ALIASES+': '"endrst=\endverbatim"',
    'GENERATE_HTML': 'NO',          # change this to YES to generate relation graphics
    'OUTPUT_LANGUAGE': 'German',
    'EXTRACT_ALL': 'YES',
    'HAVE_DOT': 'YES',
    'TEMPLATE_RELATIONS': 'YES',
    'CALL_GRAPH': 'YES',
    'CALLER_GRAPH': 'YES',
    'DOT_CLEANUP': 'NO',
    'ENABLE_PREPROCESSING': 'YES',
    'MACRO_EXPANSION': 'YES',
    'EXPAND_ONLY_PREDEF': 'YES',
    'PREDEFINED': '__attribute__(x)=',
}

# Tell sphinx what the primary language being documented is.
primary_domain = 'cpp'

# Tell sphinx what the pygments highlight language should be.
highlight_language = 'cpp'

# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
# on_rtd is whether we are on readthedocs.org, this line of code grabbed from docs.readthedocs.org
on_rtd = os.environ.get('READTHEDOCS', None) == 'True'
if not on_rtd:  # only import and set the theme if we're building docs locally
    import sphinx_rtd_theme

    html_theme = 'sphinx_rtd_theme'
    html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]
# otherwise, readthedocs.org uses their theme by default, so no need to specify it

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']
html_css_files = [
    'custom.css',
]


# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# This is required for the alabaster theme
# refs: http://alabaster.readthedocs.io/en/latest/installation.html#sidebars
html_sidebars = {
    '**': [
        'about.html',
        'navigation.html',
        'relations.html',  # needs 'show_related': True theme option to display
        'searchbox.html',
        'donate.html',
    ]
}

# -- Options for HTMLHelp output ------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'toolLibsDoc'

# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'toolLibsDoc.tex', 'tool libraries documentation',
     'IACE', 'manual'),
]

# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'toolLibsDoc', 'tool libraries documentation',
     [author], 1)
]

# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'toolLibsDoc', 'tool libraries documentation',
     author, 'toolLibsDoc', 'tool libraries documentation',
     'Miscellaneous'),
]
